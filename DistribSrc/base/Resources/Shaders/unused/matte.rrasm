;	surface
;	matte(
;		float Ka = 1;
;		float Kd = 1;)
;	{
;		normal Nf = faceforward(normalize(N), I);
;		Oi = Os;
;		Ci = Os * Cs * (Ka*ambient() + Kd*diffuse(Nf));
;	}

.data
	Cs		global varying color
	Os		global varying color
	Ci		global varying color
	Oi		global varying color
	N		global varying normal
	I		global varying vector

	_@K19	constant  uniform float   	1.000000 
	
	Ka		parameter uniform float
	Kd		parameter uniform float

	Nf		temporary varying normal

.code

surface

__defparam_Ka:
	mov.ss		Ka	_@K19
	ret

__defparam_Kd:
	mov.ss		Kd	_@K19
	ret
	
__main:
	normalize	$v0		N
	faceforward	Nf	$v0	I

	diffuse		$v0	Nf		// -- Kd * diffuse( Nf )
	mul.vvs		$v0	$v0	Kd

	ambient		$v1			// -- Ka * ambient()
	mul.vvs		$v1	$v1	Ka

	add.vvv		$v0	$v0	$v1	// +

	mul.vvv		$v0	$v0	Cs	// * Cs
	mul.vvv		Ci	$v0	Os	// * Os -> Ci

	mov.vv		Oi	Os		// Oi = Os

	ret
